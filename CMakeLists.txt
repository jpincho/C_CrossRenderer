project ( C_CrossRenderer )
cmake_minimum_required ( VERSION 3.10 )

set ( CMAKE_LIBRARY_OUTPUT_DIRECTORY "${PROJECT_BINARY_DIR}/output/bin" )
set ( CMAKE_ARCHIVE_OUTPUT_DIRECTORY "${PROJECT_BINARY_DIR}/output/lib" )
set ( CMAKE_RUNTIME_OUTPUT_DIRECTORY "${PROJECT_BINARY_DIR}/output/bin" )

list ( APPEND CMAKE_MODULE_PATH ${CMAKE_CURRENT_LIST_DIR}/ExternalModules/CMakeUtils )
list ( APPEND CMAKE_MODULE_PATH ${CMAKE_ARCHIVE_OUTPUT_DIRECTORY}/cmake )
file ( GLOB CMAKE_SUBFOLDERS LIST_DIRECTORIES TRUE "${CMAKE_ARCHIVE_OUTPUT_DIRECTORY}/cmake/*" )
foreach ( DIR_ITERATOR ${CMAKE_SUBFOLDERS} )
    if ( IS_DIRECTORY ${DIR_ITERATOR} )
        list ( APPEND CMAKE_MODULE_PATH "${CMAKE_ARCHIVE_OUTPUT_DIRECTORY}/cmake/${DIR_ITERATOR}" )
    endif()
endforeach()
list ( APPEND CMAKE_PREFIX_PATH ${CMAKE_MODULE_PATH} )
include ( LocalPackage )
set ( LOCAL_PACKAGE_ALLOW_SYSTEM TRUE )
set_local_package_install_location ( "${PROJECT_BINARY_DIR}/output/" )
list ( APPEND CROSS_RENDERER_NECESSARY_DEPENDENCIES glfw3 )

list ( APPEND CROSS_RENDERER_NECESSARY_DEPENDENCIES cglm )
set ( CMAKE_C_STANDARD 11 )
set ( CMAKE_C_STANDARD_REQUIRED ON )

foreach ( DEPENDENCY ${CROSS_RENDERER_NECESSARY_DEPENDENCIES} )
    find_local_package ( ${DEPENDENCY} QUIET )
    string ( TOUPPER ${DEPENDENCY} UPPERCASE_DEPENDENCY )
    if (( NOT ${UPPERCASE_DEPENDENCY}_FOUND ) AND ( NOT ${DEPENDENCY}_DIR ))
        install_local_package ( ${DEPENDENCY} )
    endif()
endforeach()
install_local_packages()

# Dependencies installed, configuring CrossRenderer
include ( target_warning_options )
set ( CROSS_RENDERER_HOST_PLATFORM ${CMAKE_SYSTEM_NAME} )
set ( CROSS_RENDERER_TARGET_PLATFORM ${CMAKE_SYSTEM_NAME} )
string ( TOUPPER ${CROSS_RENDERER_HOST_PLATFORM} CROSS_RENDERER_UPPERCASE_HOST_PLATFORM )
string ( TOUPPER ${CROSS_RENDERER_TARGET_PLATFORM} CROSS_RENDERER_UPPERCASE_TARGET_PLATFORM )

if ( CMAKE_SIZEOF_VOID_P EQUAL 8 )
    set ( CROSS_RENDERER_CPU_BITS 64 )
else()
    set ( CROSS_RENDERER_CPU_BITS 32 )
endif()
set ( CROSS_RENDERER_HOST_PLATFORM_${CROSS_RENDERER_UPPERCASE_HOST_PLATFORM} TRUE )
set ( CROSS_RENDERER_TARGET_PLATFORM_${CROSS_RENDERER_UPPERCASE_TARGET_PLATFORM} TRUE )
set ( CROSS_RENDERER_CPU_${CROSS_RENDERER_CPU_BITS} TRUE )

string ( TOUPPER ${CMAKE_C_COMPILER_ID} CROSS_RENDERER_UPPERCASE_C_COMPILER )
set ( CROSS_RENDERER_C_COMPILER_${CROSS_RENDERER_UPPERCASE_C_COMPILER} TRUE )

message ( STATUS "${PROJECT_NAME} - Build host ${CROSS_RENDERER_HOST_PLATFORM}")
message ( STATUS "${PROJECT_NAME} - Build target ${CROSS_RENDERER_TARGET_PLATFORM}")

# GLFW3
if (( GLFW3_FOUND ) OR (glfw3_DIR))
    option ( CROSS_RENDERER_GLFW3_BACKEND_SUPPORT "Build GLFW3 window backend support" TRUE )
    if ( CROSS_RENDERER_GLFW3_BACKEND_SUPPORT )
        message ( STATUS "${PROJECT_NAME} - Building with GLFW3 backend support" )
        list ( APPEND CROSS_RENDERER_INCLUDE_DIRS ${GLFW3_INCLUDE_DIRS} )
        if ( ${GLFW3_LIBRARIES} )
            list ( APPEND CROSS_RENDERER_LIBRARIES ${GLFW3_LIBRARIES} )
        else()
            list ( APPEND CROSS_RENDERER_LIBRARIES glfw )
        endif()
        file ( GLOB CROSS_RENDERER_GLFW3_SOURCES "WindowManager/GLFW3/*" )
        list ( APPEND CROSS_RENDERER_SOURCE_FILES ${CROSS_RENDERER_GLFW3_SOURCES} )
        source_group ( "WindowManager/GLFW3" FILES ${CROSS_RENDERER_GLFW3_SOURCES} )
        if ( CROSS_RENDERER_TARGET_PLATFORM_WINDOWS )
            foreach ( WINDOWS_LIBRARY winmm imm32 version )
                find_library ( LIBRARY_LOCATION NAMES ${WINDOWS_LIBRARY} )
                list ( APPEND CROSS_RENDERER_LIBRARIES ${LIBRARY_LOCATION} )
            endforeach()
        endif()
    endif()
endif()

# OpenGL backend
set ( OpenGL_GL_PREFERENCE GLVND )
find_package ( OpenGL QUIET )
if ( OPENGL_FOUND )
    option ( CROSS_RENDERER_OPENGL_CORE_SUPPORT "Enable support for OpenGL Core" TRUE )
endif()

if ( CROSS_RENDERER_OPENGL_CORE_SUPPORT )
    message ( STATUS "${PROJECT_NAME} - Building OpenGL4 core backend C" )
    file ( GLOB CROSS_RENDERER_OPENGL_SOURCES "C_Renderer/OpenGL4/*.c" "C_Renderer/OpenGL4/*.h" )
    list ( APPEND CROSS_RENDERER_SOURCE_FILES ${CROSS_RENDERER_OPENGL_SOURCES} )
    source_group ( "OpenGL" FILES ${CROSS_RENDERER_OPENGL_SOURCES} )

    # GLAD core
    if ( NOT TARGET GLAD )
        file ( GLOB_RECURSE GLAD_SOURCES "ExternalModules/glad_core/*")
        add_library ( GLAD ${GLAD_SOURCES} )
        target_include_directories ( GLAD PUBLIC ${CMAKE_CURRENT_LIST_DIR}/ExternalModules/glad_core/include )
        list ( APPEND CROSS_RENDERER_LIBRARIES GLAD )
        target_warning_options ( GLAD DISABLED )
    endif()
    if ( CROSS_RENDERER_TARGET_PLATFORM_LINUX )
        foreach ( LINUX_LIBRARY dl )
            find_library ( LIBRARY_LOCATION NAMES ${LINUX_LIBRARY} )
            list ( APPEND CROSS_RENDERER_LIBRARIES ${LIBRARY_LOCATION} )
        endforeach()
    endif()
endif()

if ( NOT TARGET Platform )
    add_subdirectory ( ExternalModules/Platform )
endif()

# Main library
configure_file ( CrossRendererConfig.h.in CrossRendererConfig.h )
file ( GLOB SOURCES "*.c" "*.h" "Renderer/*.c" "Renderer/*.h" "WindowManager/*.c" "WindowManager/*.h" "Internal/*" CrossRendererConfig.h.in AstyleConfig.astylerc )
list ( APPEND CROSS_RENDERER_SOURCE_FILES ${SOURCES} )
add_library ( C_CrossRenderer ${CROSS_RENDERER_SOURCE_FILES} )
target_include_directories ( C_CrossRenderer PUBLIC ${CROSS_RENDERER_INCLUDE_DIRS} ${CMAKE_CURRENT_BINARY_DIR} ${CGLM_INCLUDE_DIRS} ExternalModules )
target_link_libraries ( C_CrossRenderer PUBLIC ${CROSS_RENDERER_LIBRARIES} )
target_warning_options ( C_CrossRenderer HIGH AS_ERRORS )
